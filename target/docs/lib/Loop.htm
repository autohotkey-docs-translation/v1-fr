<!DOCTYPE HTML>
<html lang="fr">
<head>
<title>Loop - Syntax &amp; Usage | AutoHotkey</title>
<meta name="description" content="The Loop statement performs a series of code lines repeatedly: either the specified number of times or until a Break statement is encountered." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Loop (normal)</h1>

<p>Performs a series of commands repeatedly: either the specified number of times or until <a href="Break.htm">break</a> is encountered.</p>

<pre class="Syntax"><span class="func">Loop</span> <span class="optional">, Count</span></pre>
<h2>Parameters</h2>
<dl>

  <dt>Count</dt>
  <dd><p>How many times (iterations) to perform the loop. If omitted, the Loop continues indefinitely until a <a href="Break.htm">break</a> or <a href="Return.htm">return</a> is encountered.</p>
      <p>If <em>Count</em> is a variable reference such as %ItemCount%, the loop is skipped entirely whenever the variable is blank or contains a number less than 1.</p>
      <p>Due to the need to support <a href="LoopFile.htm">file-pattern loops</a>, <em>Count</em> cannot be an expression. However, as with all non-expression parameters, an expression can be forcibly used by preceding it with a % and a space. Par exemple : <code>Loop % Count + 1</code>. In such cases, the expression is evaluated only once, right before the loop begins.</p></dd>

</dl>

<h2>Remarques</h2>
<p>The loop command is usually followed by a <a href="Block.htm">block</a>, which is a collection of statements that form the <em>body</em> of the loop. However, a loop with only a single statement does not require a block (an "if" and its "else" count as a single statement for this purpose).</p>
<p>A common use of this command is an infinite loop that uses the <a href="Break.htm">break</a> command somewhere in the loop's <em>body</em> to determine when to stop the loop.</p>
<p>The use of <a href="Break.htm">break</a> and <a href="Continue.htm">continue</a> inside a loop are encouraged as alternatives to <a href="Goto.htm">goto</a>, since they generally make a script more understandable and maintainable. One can also create a "While" or "Do...While/Until" loop by making the first or last statement of the loop's <em>body</em> an IF statement that conditionally issues the <a href="Break.htm">break</a> command, but the use of <a href="While.htm">While</a> or <a href="Until.htm">Loop...Until</a> is usually preferred.</p>
<p>La variable intégrée <strong>A_Index</strong> contient le numéro de l'itération actuelle de la boucle. It contains 1 the first time the loop's <em>body</em> is executed. La deuxième fois, elle contient 2 ; et ainsi de suite. Si une boucle interne est à l'intérieur d'une boucle externe, la boucle interne prend la priorité. A_Index works inside all types of loops, including <a href="LoopFile.htm">file-loops</a> and <a href="LoopReg.htm">registry-loops</a>; but A_Index contains 0 outside of a loop.</p>
<p>The <a href="Block.htm#otb">One True Brace (OTB) style</a> may optionally be used with normal loops (but not specialized loops such as <a href="LoopFile.htm">file-pattern</a> and <a href="LoopParse.htm">parsing</a>). Par exemple :</p>
<pre>Loop {
    ...
}
Loop %RepeatCount% {
    ...
}</pre>
<p>Specialized loops: Loops can be used to automatically retrieve files, folders, or registry items (one at a time). See <a href="LoopFile.htm">file-loop</a> and <a href="LoopReg.htm">registry-loop</a> for details. In addition, <a href="LoopReadFile.htm">file-reading loops</a> can operate on the entire contents of a file, one line at a time. Finally, <a href="LoopParse.htm">parsing loops</a> can operate on the individual fields contained inside a delimited string.</p>
<h2>Related</h2>
<p><a href="Until.htm">Until</a>, <a href="While.htm">While-loop</a>, <a href="For.htm">For-loop</a>, <a href="LoopFile.htm">Files-and-folders loop</a>, <a href="LoopReg.htm">Registry loop</a>, <a href="LoopReadFile.htm">File-reading loop</a>, <a href="LoopParse.htm">Parsing loop</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Blocks</a></p>
<h2>Exemples</h2>
<div class="ex" id="ExBasic">
<p><a href="#ExBasic">#1</a></p>
<pre>Loop, 3
{
    MsgBox, Iteration number is %A_Index%.  <em>; A_Index will be 1, 2, then 3</em>
    Sleep, 100
}</pre>
</div>

<div class="ex" id="ExBreakContinue">
<p><a href="#ExBreakContinue">#2</a></p>
<pre>Loop
{
    if (A_Index &gt; 25)
        break  <em>; Terminate the loop</em>
    if (A_Index &lt; 20)
        continue <em>; Skip the below and start a new iteration</em>
    MsgBox, A_Index = %A_Index% <em>; This will display only the numbers 20 through 25</em>
}</pre>
</div>

</body>
</html>
