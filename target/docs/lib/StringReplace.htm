<!DOCTYPE HTML>
<html lang="fr">
<head>
<title>StrReplace() / StringReplace - Syntax &amp; Usage | AutoHotkey</title>
<meta name="description" content="The StrReplace function and StringReplace command replace the specified substring with a new string." />
<meta name="ahk:equiv-v2" content="commands/StrReplace.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>StrReplace() / StringReplace</h1>
<p>Replaces the specified substring with a new string.</p>

<h2 id="function">StrReplace() <span class="ver">[v1.1.21+]</span></h2>
<pre class="Syntax">ReplacedStr := <span class="func">StrReplace</span>(Haystack, SearchText <span class="optional">, ReplaceText, OutputVarCount, Limit := -1</span>)</pre>

<h3>Parameters</h3>
<dl>

  <dt>Haystack</dt>
  <dd><p>The string whose content is searched and replaced.</p></dd>

  <dt>SearchText</dt>
  <dd><p>The string to search for. Matching is not case sensitive unless <a href="StringCaseSense.htm">StringCaseSense</a> has been turned on.</p></dd>

  <dt>ReplaceText</dt>
  <dd><p><em>SearchText</em> will be replaced with this text. If omitted or blank, <em>SearchText</em> will be replaced with blank (empty). In other words, it will be omitted from <em>OutputVar</em>.</p></dd>
  
  <dt>OutputVarCount</dt>
  <dd><p>Specify a variable in which to store the number of replacements that occurred (0 if none).</p></dd>
  
  <dt>Limit</dt>
  <dd><p>If <em>Limit</em> is omitted, it defaults to -1, which replaces <strong>all</strong> occurrences of the pattern found in <em>Haystack</em>. Otherwise, specify the maximum number of replacements to allow. The part of <em>Haystack</em> to the right of the last replacement is left unchanged.</p></dd>

</dl>

<h3>Return Value</h3>
<p>This function returns a version of <em>Haystack</em> whose contents have been replaced by the operation. If no replacements are needed, <em>Haystack</em> is returned unaltered.</p>

<h3>Exemples</h3>
<pre class="NoIndent"><em>; Remove all CR+LF's from the clipboard contents:</em>
Clipboard := StrReplace(Clipboard, "`r`n")

<em>; Remplace les espaces par des plus :</em>
NewStr := StrReplace(OldStr, A_Space, "+")

<em>; Remove all blank lines from the text in a variable:</em>
Loop
{
    MyString := StrReplace(MyString, "`r`n`r`n", "`r`n", Count)
    if (Count = 0)  <em>; No more replacements needed.</em>
        break
}</pre>

<h2 id="command">StringReplace</h2>
<p class="warning"><strong>Deprecated:</strong> This command is not recommended for use in new scripts. Use the <a href="#function">StrReplace</a> function instead.</p>
<pre class="Syntax"><span class="func">StringReplace</span>, OutputVar, InputVar, SearchText <span class="optional">, ReplaceText, ReplaceAll?</span></pre>

<h3>Parameters</h3>
<dl>

  <dt>VarSortie</dt>
  <dd><p>The name of the variable in which to store the result of the replacement process.</p></dd>

  <dt>VarEntree</dt>
  <dd><p>The name of the variable whose contents will be read from. Do not enclose the name in percent signs unless you want the <em>contents</em> of the variable to be used as the name.</p></dd>

  <dt>SearchText</dt>
  <dd><p>The string to search for. Matching is not case sensitive unless <a href="StringCaseSense.htm">StringCaseSense</a> has been turned on.</p></dd>

  <dt>ReplaceText</dt>
  <dd><p><em>SearchText</em> will be replaced with this text. If omitted or blank, <em>SearchText</em> will be replaced with blank (empty). In other words, it will be omitted from <em>OutputVar</em>.</p></dd>
  
  <dt>ReplaceAll?</dt>
  <dd><p>If omitted, only the first occurrence of <em>SearchText</em> will be replaced. But if this parameter is 1, A, or All, all occurrences will be replaced.</p>
      <p>Specify the word <strong>UseErrorLevel</strong> to store in ErrorLevel the number of occurrences replaced (0 if none). UseErrorLevel implies "All".</p></dd>

</dl>

<h3>ErrorLevel</h3>
<p>When the last parameter is <em>UseErrorLevel</em>, <a href="../misc/ErrorLevel.htm">ErrorLevel</a> is given the number occurrences replaced (0 if none). Otherwise, ErrorLevel is set to 1 if <em>SearchText</em> is not found within <em>InputVar</em>, or 0 if it is found.</p>

<h3>Remarques</h3>
<p>For this and all other commands, <em>OutputVar</em> is allowed to be the same variable as an <em>InputVar</em>.</p>
<p>The built-in variables <a href="../Variables.htm">%A_Space%</a> and <a href="../Variables.htm">%A_Tab%</a> contain a single space and a single tab character, respectively. They are useful when searching for spaces and tabs alone or at the beginning or end of <em>SearchText</em>.</p>
<p><span class="ver">[v1.0.45+]</span>: The AllSlow option became obsolete due to improvements to performance and memory utilization. Although it may still be specified, it has no effect.</p>

<h3>Exemples</h3>
<pre class="NoIndent"><em>; Remove all CR+LF's from the clipboard contents:</em>
StringReplace, Clipboard, Clipboard, `r`n, , All

<em>; Remplace les espaces par des plus :</em>
StringReplace, NouvelleChaine, AncienneChaine, %A_Space%, +, All

<em>; Remove all blank lines from the text in a variable:</em>
Loop
{
    StringReplace, MyString, MyString, `r`n`r`n, `r`n, UseErrorLevel
    if (ErrorLevel = 0)  <em>; No more replacements needed.</em>
        break
}</pre>

<h2>Related</h2>
<p><a href="RegExReplace.htm">RegExReplace()</a>, <a href="IfInString.htm">IfInString</a>, <a href="StringCaseSense.htm">StringCaseSense</a>, <a href="StringLeft.htm">StringLeft</a>, <a href="StringLeft.htm">StringRight</a>, <a href="StringMid.htm">StringMid</a>, <a href="StringTrimLeft.htm">StringTrimLeft</a>, <a href="StringTrimLeft.htm">StringTrimRight</a>, <a href="StringLen.htm">StrLen() / StringLen</a>, <a href="StringLower.htm">StringLower</a>, <a href="StringLower.htm">StringUpper</a>, <a href="StringGetPos.htm">StringGetPos</a>,  <a href="IfIs.htm">if var is type</a></p>

</body>
</html>